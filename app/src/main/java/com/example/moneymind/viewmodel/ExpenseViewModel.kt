package com.example.moneymind.viewmodel

import androidx.lifecycle.*
import com.example.moneymind.data.CategoryTotal
import com.example.moneymind.data.Expense
import com.example.moneymind.data.ExpenseRepository
import kotlinx.coroutines.launch

class ExpenseViewModel(private val repository: ExpenseRepository) : ViewModel() {

    // –í—Å–µ —Ä–∞—Å—Ö–æ–¥—ã
    val allExpenses: LiveData<List<Expense>> = repository.allExpenses

    // –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å —Å—É–º–º–∞–º–∏ (–≤—Å–µ)
    private val _categoryTotals: LiveData<List<CategoryTotal>> = repository.getCategoryTotals()
    fun getCategoryTotals(): LiveData<List<CategoryTotal>> = _categoryTotals

    fun getExpenses(): LiveData<List<Expense>> = allExpenses

    fun insert(expense: Expense) = viewModelScope.launch {
        repository.insert(expense)
    }

    fun update(expense: Expense) = viewModelScope.launch {
        repository.update(expense)
    }

    fun delete(expense: Expense) = viewModelScope.launch {
        repository.delete(expense)
    }

    fun getExpenseById(id: Int): LiveData<Expense> {
        return repository.getExpenseById(id)
    }

    // üîΩ –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –¥–∞—Ç–∞–º (–¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ —ç–∫—Ä–∞–Ω–∞)
    fun getLast7DaysExpenses(): LiveData<List<Expense>> {
        val daysAgo = System.currentTimeMillis() - 7L * 24 * 60 * 60 * 1000
        return repository.getExpensesFromDate(daysAgo)
    }

    fun getLast30DaysExpenses(): LiveData<List<Expense>> {
        val daysAgo = System.currentTimeMillis() - 30L * 24 * 60 * 60 * 1000
        return repository.getExpensesFromDate(daysAgo)
    }

    // ‚úÖ üîΩ –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –º–µ—Ç–æ–¥—ã
    fun getLast90DaysExpenses(): LiveData<List<Expense>> {
        val daysAgo = System.currentTimeMillis() - 90L * 24 * 60 * 60 * 1000
        return repository.getExpensesFromDate(daysAgo)
    }

    fun getLast365DaysExpenses(): LiveData<List<Expense>> {
        val daysAgo = System.currentTimeMillis() - 365L * 24 * 60 * 60 * 1000
        return repository.getExpensesFromDate(daysAgo)
    }

    // ‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –∑–∞ —Ä–∞–∑–Ω—ã–µ –ø–µ—Ä–∏–æ–¥—ã (–¥–ª—è –¥–∏–∞–≥—Ä–∞–º–º)
    fun getLast7DaysCategoryTotals(): LiveData<List<CategoryTotal>> {
        val daysAgo = System.currentTimeMillis() - 7L * 24 * 60 * 60 * 1000
        return repository.getCategoryTotalsFromDate(daysAgo)
    }

    fun getLast30DaysCategoryTotals(): LiveData<List<CategoryTotal>> {
        val daysAgo = System.currentTimeMillis() - 30L * 24 * 60 * 60 * 1000
        return repository.getCategoryTotalsFromDate(daysAgo)
    }

    fun getLast90DaysCategoryTotals(): LiveData<List<CategoryTotal>> {
        val daysAgo = System.currentTimeMillis() - 90L * 24 * 60 * 60 * 1000
        return repository.getCategoryTotalsFromDate(daysAgo)
    }

    fun getLast365DaysCategoryTotals(): LiveData<List<CategoryTotal>> {
        val daysAgo = System.currentTimeMillis() - 365L * 24 * 60 * 60 * 1000
        return repository.getCategoryTotalsFromDate(daysAgo)
    }

    // ‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–¥–ª—è –ø—Ä–æ–≤–∞–ª–∏–≤–∞–Ω–∏—è)
    fun getExpensesByCategory(category: String): LiveData<List<Expense>> {
        return repository.getExpensesByCategory(category)
    }
}