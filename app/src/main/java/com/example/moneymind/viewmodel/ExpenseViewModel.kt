package com.example.moneymind.viewmodel

import android.util.Log
import com.example.moneymind.utils.FirestoreHelper
import androidx.lifecycle.*
import com.example.moneymind.data.Category
import com.example.moneymind.data.CategoryRepository
import com.example.moneymind.utils.BoolCallback
import com.example.moneymind.data.Expense
import com.example.moneymind.data.ExpenseRepository
import kotlinx.coroutines.launch

class ExpenseViewModel(
    private val expenseRepository: ExpenseRepository,
    private val categoryRepository: CategoryRepository
) : ViewModel() {
    val allExpenses: LiveData<List<Expense>> = expenseRepository.allExpenses
    val allExpensesOnly: LiveData<List<Expense>> = expenseRepository.allExpensesOnly
    val allIncomes: LiveData<List<Expense>> = expenseRepository.allIncomes




    fun insert(expense: Expense) = viewModelScope.launch {
        expenseRepository.insert(expense)
    }

    fun update(expense: Expense) = viewModelScope.launch {
        expenseRepository.update(expense)
        FirestoreHelper.updateExpenseInFirestore(expense)  // üî• —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Firestore
    }

    fun delete(expense: Expense) = viewModelScope.launch {
        expenseRepository.delete(expense)
        FirestoreHelper.deleteExpenseFromFirestore(expense)  // ‚ùå —É–¥–∞–ª—è–µ–º –∏–∑ Firestore
    }

    fun getExpenseById(id: Int): LiveData<Expense> {
        return expenseRepository.getExpenseById(id)
    }

    // –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–µ—Ä–∏–æ–¥–∞–º–∏ (7, 30, 90, 365 –¥–Ω–µ–π)
    fun getLast7DaysExpenses(): LiveData<List<Expense>> = expenseRepository.getAllFromDate(daysAgo(7))
    fun getLast30DaysExpenses(): LiveData<List<Expense>> = expenseRepository.getAllFromDate(daysAgo(30))
    fun getLast90DaysExpenses(): LiveData<List<Expense>> = expenseRepository.getAllFromDate(daysAgo(90))
    fun getLast365DaysExpenses(): LiveData<List<Expense>> = expenseRepository.getAllFromDate(daysAgo(365))

    fun getLast7DaysExpensesOnly(): LiveData<List<Expense>> = expenseRepository.getExpensesFromDateOnly(daysAgo(7))
    fun getLast30DaysExpensesOnly(): LiveData<List<Expense>> = expenseRepository.getExpensesFromDateOnly(daysAgo(30))
    fun getLast90DaysExpensesOnly(): LiveData<List<Expense>> = expenseRepository.getExpensesFromDateOnly(daysAgo(90))
    fun getLast365DaysExpensesOnly(): LiveData<List<Expense>> = expenseRepository.getExpensesFromDateOnly(daysAgo(365))

    fun getLast7DaysIncomes(): LiveData<List<Expense>> = expenseRepository.getIncomesFromDate(daysAgo(7))
    fun getLast30DaysIncomes(): LiveData<List<Expense>> = expenseRepository.getIncomesFromDate(daysAgo(30))
    fun getLast90DaysIncomes(): LiveData<List<Expense>> = expenseRepository.getIncomesFromDate(daysAgo(90))
    fun getLast365DaysIncomes(): LiveData<List<Expense>> = expenseRepository.getIncomesFromDate(daysAgo(365))


    // –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–º –¥–∏–∞–ø–∞–∑–æ–Ω–æ–º –¥–∞—Ç (–¥–ª—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è)
    fun getExpensesBetween(startDate: Long, endDate: Long): LiveData<List<Expense>> {
        return expenseRepository.getExpensesBetweenDates(startDate, endDate)
    }





    fun searchExpensesByTitleOrCategory(query: String): LiveData<List<Expense>> {
        return expenseRepository.searchExpensesByTitleOrCategory(query)
    }

    // –í—Å—Ç–∞–≤–∫–∞/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    fun insertExpense(expense: Expense) = viewModelScope.launch {
        expenseRepository.insert(expense)
        FirestoreHelper.saveExpenseToFirestore(expense)
        Log.d("Firestore", "Saving expense and category to Firestore...");
    }

    fun insertCategory(category: Category) = viewModelScope.launch {
        categoryRepository.insert(category)
        FirestoreHelper.saveCategoryToFirestore(category)
        Log.d("Firestore", "Saving expense and category to Firestore...");
    }



    // –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ—Å–ª–µ–¥–Ω–∏–º–∏ —Ä–∞—Å—Ö–æ–¥–∞–º–∏ (–≤—Å–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7, 30 –¥–Ω–µ–π)
    fun getLast7DaysAll(): LiveData<List<Expense>> = expenseRepository.getExpensesFromDate(daysAgo(7))
    fun getLast30DaysAll(): LiveData<List<Expense>> = expenseRepository.getExpensesFromDate(daysAgo(30))

    // –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –≤ –ø—Ä–æ—à–ª–æ–º
    private fun daysAgo(days: Int): Long {
        return System.currentTimeMillis() - days * 24L * 60 * 60 * 1000
    }
    fun getExpensesBetweenDates(startDate: Long, endDate: Long): LiveData<List<Expense>> {
        return expenseRepository.getExpensesBetweenDates(startDate, endDate)
    }

    // –ú–µ—Ç–æ–¥ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å Firebase
    @JvmOverloads
    fun restoreFromFirebase() {
        FirestoreHelper.loadCategoriesFromFirestore(object : FirestoreHelper.CategoryDataCallback {
            override fun onCategoriesLoaded(categories: List<Category>) {
                viewModelScope.launch {
                    for (category in categories) {
                        categoryRepository.insert(category)
                    }
                }
            }

            override fun onIncomeCategoriesLoaded(incomeCategories: List<Category>) {
                // –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –¥–æ—Ö–æ–¥–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                viewModelScope.launch {
                    for (category in incomeCategories) {
                        categoryRepository.insert(category)  // –í—Å—Ç–∞–≤–ª—è–µ–º –¥–æ—Ö–æ–¥–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                    }
                }
            }

            override fun onExpenseCategoriesLoaded(expenseCategories: List<Category>) {
                // –û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ä–∞—Å—Ö–æ–¥–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                viewModelScope.launch {
                    for (category in expenseCategories) {
                        categoryRepository.insert(category)  // –í—Å—Ç–∞–≤–ª—è–µ–º —Ä–∞—Å—Ö–æ–¥–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                    }
                }
            }

            override fun onError(e: Exception) {
                // –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ—à–∏–±–∫—É
                Log.e("FirestoreHelper", "Error loading categories: ${e.message}")
            }
        })

        FirestoreHelper.loadExpensesFromFirestore(object : FirestoreHelper.ExpenseDataCallback {
            override fun onExpensesLoaded(expenses: List<Expense>) {
                viewModelScope.launch {
                    for (expense in expenses) {
                        expenseRepository.insert(expense)
                    }
                }
            }

            override fun onError(e: Exception) {
                Log.e("FirestoreHelper", "Error loading expenses: ${e.message}")
            }
        })
    }
    fun syncExpensesFromFirestore(onComplete: (Boolean) -> Unit) {
        expenseRepository.syncExpensesFromFirestore(onComplete)
    }

    fun syncExpensesFromFirestore(onComplete: BoolCallback) {
        // –º–æ—Å—Ç–∏–∫ –∏–∑ Java-SAM –≤ –ª—è–º–±–¥—É Kotlin
        syncExpensesFromFirestore { success -> onComplete.onResult(success) }
    }

    fun syncCategoriesFromFirestore(onComplete: (Boolean) -> Unit) {
        categoryRepository.syncCategoriesFromFirestore(onComplete)
    }

    fun syncCategoriesFromFirestore(onComplete: BoolCallback) {
        // –º–æ—Å—Ç–∏–∫ –∏–∑ Java-SAM –≤ –ª—è–º–±–¥—É Kotlin
        syncCategoriesFromFirestore { success -> onComplete.onResult(success) }
    }

}