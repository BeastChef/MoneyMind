package com.example.moneymind.data

import androidx.lifecycle.LiveData
import androidx.room.*

@Dao
interface ExpenseDao {

    @Insert(onConflict = OnConflictStrategy.REPLACE)
    suspend fun insert(expense: Expense)

    @Update
    suspend fun update(expense: Expense)

    @Delete
    suspend fun delete(expense: Expense)

    // üîΩ –í—Å–µ –∑–∞–ø–∏—Å–∏ (–¥–æ—Ö–æ–¥—ã –∏ —Ä–∞—Å—Ö–æ–¥—ã)
    @Query("SELECT * FROM transactions ORDER BY date DESC")
    fun getAllTransactions(): LiveData<List<Expense>>

    // ‚úÖ üîΩ –ú–µ—Ç–æ–¥ –¥–ª—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è ‚Äî –≤—Å–µ –∑–∞–ø–∏—Å–∏ (–≤—Å–µ —Ç–∏–ø—ã)
    @Query("SELECT * FROM transactions ORDER BY date DESC")
    fun getAllExpenses(): LiveData<List<Expense>>  // ‚¨Ö –¥–æ–±–∞–≤–ª–µ–Ω –º–µ—Ç–æ–¥

    // ‚úÖ üîΩ –ú–µ—Ç–æ–¥ –¥–ª—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è ‚Äî –≤—Å–µ –∑–∞–ø–∏—Å–∏ —Å —Ñ–∏–ª—å—Ç—Ä–æ–º –ø–æ –¥–∞—Ç–µ
    @Query("SELECT * FROM transactions WHERE date >= :fromDate ORDER BY date DESC")
    fun getExpensesFromDate(fromDate: Long): LiveData<List<Expense>>  // ‚¨Ö –¥–æ–±–∞–≤–ª–µ–Ω –º–µ—Ç–æ–¥

    // ‚úÖ –¢–æ–ª—å–∫–æ —Ä–∞—Å—Ö–æ–¥—ã
    @Query("SELECT * FROM transactions WHERE type = 'expense' ORDER BY date DESC")
    fun getAllExpensesOnly(): LiveData<List<Expense>>

    // ‚úÖ –¢–æ–ª—å–∫–æ –¥–æ—Ö–æ–¥—ã
    @Query("SELECT * FROM transactions WHERE type = 'income' ORDER BY date DESC")
    fun getAllIncomes(): LiveData<List<Expense>>

    // ‚úÖ –¢–æ–ª—å–∫–æ —Ä–∞—Å—Ö–æ–¥—ã —Å –¥–∞—Ç—ã
    @Query("SELECT * FROM transactions WHERE date >= :fromDate AND type = 'expense' ORDER BY date DESC")
    fun getExpensesFromDateOnly(fromDate: Long): LiveData<List<Expense>>

    // ‚úÖ –¢–æ–ª—å–∫–æ –¥–æ—Ö–æ–¥—ã —Å –¥–∞—Ç—ã
    @Query("SELECT * FROM transactions WHERE date >= :fromDate AND type = 'income' ORDER BY date DESC")
    fun getIncomesFromDate(fromDate: Long): LiveData<List<Expense>>

    // ‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ (–≤—Å–µ –∑–∞–ø–∏—Å–∏)
    @Query("SELECT category, SUM(amount) AS total FROM transactions GROUP BY category")
    fun getCategoryTotals(): LiveData<List<CategoryTotal>>

    // ‚úÖ –¢–æ–ª—å–∫–æ —Ä–∞—Å—Ö–æ–¥—ã (–∫–∞—Ç–µ–≥–æ—Ä–∏–∏)
    @Query("SELECT category, SUM(amount) AS total FROM transactions WHERE type = 'expense' GROUP BY category")
    fun getCategoryTotalsOnly(): LiveData<List<CategoryTotal>>

    // ‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤—Å–µ—Ö —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –ø–æ –¥–∞—Ç–µ
    @Query("SELECT category, SUM(amount) AS total FROM transactions WHERE date >= :fromDate GROUP BY category")
    fun getCategoryTotalsFromDate(fromDate: Long): LiveData<List<CategoryTotal>>

    // ‚úÖ –¢–æ–ª—å–∫–æ —Ä–∞—Å—Ö–æ–¥—ã —Å –¥–∞—Ç–æ–π
    @Query("SELECT category, SUM(amount) AS total FROM transactions WHERE date >= :fromDate AND type = 'expense' GROUP BY category")
    fun getCategoryTotalsFromDateOnly(fromDate: Long): LiveData<List<CategoryTotal>>

    // üîç –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ ID
    @Query("SELECT * FROM transactions WHERE id = :id LIMIT 1")
    fun getById(id: Int): LiveData<Expense>

    // üîç –ü–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    @Query("SELECT * FROM transactions WHERE category = :category ORDER BY date DESC")
    fun getExpensesByCategory(category: String): LiveData<List<Expense>>
    @Query("SELECT * FROM transactions WHERE date >= :fromDate ORDER BY date DESC")
    fun getAllTransactionsFromDate(fromDate: Long): LiveData<List<Expense>>
}